services:
  api:
    build:
      context: .
      target: prod
      dockerfile: Dockerfile
    ports:
      - "8000"
    environment:
      ENVIRONMENT: prod
      HOST: 0.0.0.0
      PORT: 8080
      WORKER_COUNT: 4
      POSTGRES_SERVER: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PORT:-8080}/v1/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx:1.26-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
